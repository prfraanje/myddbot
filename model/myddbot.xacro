<?xml version="1.0"?>


<robot name="myddbot" xmlns:xacro="http://www.ros.org/wiki/xacro">

  <!--         front/forward

        |      caster     |    ^
  left  |                 |    | length   right
        |        ^ x      |    |
        |        |        |    |
      wl|<-   y<-O      ->|wr  v
         <-   baseline  ->
                 back
  -->
  
  <xacro:property name="baseline" value="1.0" />
  <xacro:property name="wheel_radius" value=".3" />
  <xacro:property name="caster_sphere_radius" value="${wheel_radius}" />

  <xacro:property name="wheel_thickness" value="0.05" />
  <xacro:property name="base_length" value="1.3" />
  <xacro:property name="base_height" value="0.1" />  

  <xacro:property name="base_mass" value="2.0" />
  <xacro:property name="wheel_mass" value="0.5" />  
  <!-- <xacro:property name="caster_mass" value="0.5" /> -->
  <xacro:property name="caster_body_mass" value="0.5" />
  <xacro:property name="caster_wheel_mass" value="0.5" />
  <xacro:property name="caster_body_radius" value="${0.2*wheel_radius}" />
  <xacro:property name="caster_body_length" value="${0.2*wheel_radius}" />
  <xacro:property name="caster_body_ixx" value="${0.5*caster_body_mass*caster_body_radius**2}" />
  <xacro:property name="caster_body_iyy" value="${caster_body_mass*(3*caster_body_radius**2+caster_body_length**2)/12.}" />
  <xacro:property name="caster_wheel_radius" value="${0.5*(wheel_radius-0.5*caster_body_length-0.5*base_height)}" />
  <xacro:property name="caster_wheel_length" value="${0.2*caster_wheel_radius}" />
  <xacro:property name="caster_wheel_ixx" value="${0.5*caster_wheel_mass*caster_wheel_radius**2}" />
  <xacro:property name="caster_wheel_iyy" value="${caster_wheel_mass*(3*caster_wheel_radius**2+caster_wheel_length**2)/12.}" />

  <xacro:property name="camera_size" value="0.1" />
  <xacro:property name="camera_mass" value="0.1" />  

  <xacro:property name="lrf_size" value="0.1" />
  <xacro:property name="lrf_mass" value="0.1" />  
  
  <xacro:property name="pi_div_2" value="${2*atan(1)}" />

  <xacro:property name="update_rate_diff_drive" value="100" />

  <material name="red">
    <color rgba="0.8 0.0 0.0 1.0" />
  </material>
  <material name="green">
    <color rgba="0.0 0.8 0.0 1.0" />
  </material>
  <material name="blue">
    <color rgba="0.0 0.0 0.8 1.0" />
  </material>
  <material name="grey">
    <color rgba="0.6 0.6 0.6 1" />
  </material>
  <material name="black">
    <color rgba="0.1 0.1 0.1 1" />
  </material>
  
  
  <!-- wheel rotates about its z vector -->
  <xacro:macro name="wheel" params="name radius width mass parent place orient">

    <xacro:property name="ixx" value="${0.5*mass*radius**2}" />
    <xacro:property name="iyy" value="${mass*(3*radius**2+width**2)/12.}" />

    <link name="${name}">
      
      <visual>
	<origin xyz="0 0 0" rpy="0 0 0" />
	<geometry>
	  <cylinder length="${width}" radius="${radius}" />
	</geometry>
	<material name="blue" />
      </visual>
      
      <inertial>
	<origin xyz="0 0 0" rpy="0 0 0" />	
	<mass value="${mass}" />
	<inertia ixx="${ixx}" ixy="0.0" ixz="0.0"
		 iyy="${iyy}" iyz="0.0" izz="${iyy}" />
      </inertial>
      
      <collision>
	<origin xyz="0 0 0" rpy="0 0 0" />
	<geometry>
	  <cylinder length="${width}" radius="${radius}" />
	</geometry>
      </collision>
      
    </link>
    
    <joint name="${parent + '_' + name + '_joint'}" type="continuous">
      <parent link="${parent}" />
      <child link="${name}"/>
      <origin xyz="${place}" rpy="${orient}" />
      <axis xyz="0.0 0.0 1.0" rpy="0 0 0"/>
      <limit effort="100" velocity="100" />
      <dynamics damping="0.0" friction="0.0"/>
    </joint>    
    
  </xacro:macro>

  <!-- see: https://www.ros.org/reps/rep-0120.html -->
  
  <link name="base_link">
      <visual name="base_link_visual">
      <geometry>
	<box size="${base_length} ${baseline-wheel_thickness} ${base_height}" />
      </geometry> 
      <origin xyz="${base_length/2} 0 0" rpy="0 0 0" /> 
      <material name="grey" />
    </visual>
    <collision>
      <geometry>
	<box size="${base_length} ${baseline-wheel_thickness} ${base_height}" />
      </geometry>
      <origin xyz="${base_length/2} 0 0" rpy="0 0 0" />
    </collision>
    <inertial>
      <mass value="${base_mass}" />
      <inertia ixx="${(1/12)*base_mass*(baseline**2+base_height**2)}" ixy="0.0" ixz="0.0"
	       iyy="${(1/12)*base_mass*(base_length**2+base_height**2)}" iyz="0.0"
	       izz="${(1/12)*base_mass*(base_length**2+baseline**2)}" />
      <origin xyz="${base_length/2} 0 0" rpy="0 0 0" /> 
    </inertial>
  </link>

  <link name="base_footprint" />

  <joint name="base_joint" type="fixed">
    <origin xyz="0 0 ${-wheel_radius}" rpy="0 0 0" />
    <parent link="base_link" />
    <child link="base_footprint" />
  </joint>
  
    
  <xacro:wheel name="wheel_left" radius="${wheel_radius}" width="${wheel_thickness}" 
	       mass="${wheel_mass}" 
	       parent="base_link"
	       place="0.0 ${1.1*baseline/2} 0"
	       orient="${-pi_div_2} 0 0" />
  
  
  <xacro:wheel name="wheel_right" radius="${wheel_radius}" width="${wheel_thickness}" 
	       mass="${wheel_mass}" 
	       parent="base_link"
	       place="0.0 ${-1.1*baseline/2} 0"
	       orient="${-pi_div_2} 0 0" />

  <link name="caster_body">
    <visual>
      <geometry>
	<cylinder length="${caster_body_length}" radius="${caster_body_radius}" />
      </geometry>
      <material name="black" />
    </visual>
    <!-- caster wheel goes through caster body so don't put collision object here -->
    <!-- collision>
      <geometry>
	<cylinder length="${caster_body_length}" radius="${caster_body_radius}" />
      </geometry>
    </collision -->
    <inertial>
      <origin xyz="0 0 0" rpy="0 0 0" />	
      <mass value="${caster_body_mass}" />
      <inertia ixx="${caster_body_ixx}" ixy="0.0" ixz="0.0"
	       iyy="${caster_body_iyy}" iyz="0.0" izz="${caster_body_iyy}" />
    </inertial>
  </link>
  <joint name="base_link_caster_body_joint" type="continuous">
    <axis xyz="0 0 1" />
    <origin xyz="${base_length-2*caster_body_radius} 0 ${-base_height/2-caster_body_length/2}" rpy="0 0 0"/>
    <parent link="base_link"/>
    <child link="caster_body"/>
  </joint>
  
  <link name="caster_wheel">
    <visual>
      <geometry>
	<cylinder length="${caster_wheel_length}" radius="${caster_wheel_radius}" />
      </geometry>
      <material name="black" />
    </visual>
    <collision>
      <geometry>
	<cylinder length="${caster_wheel_length}" radius="${caster_wheel_radius}" />
      </geometry>
    </collision>
    <inertial>
      <origin xyz="0 0 0" rpy="0 0 0" />	
      <mass value="${caster_wheel_mass}" />
      <inertia ixx="${caster_wheel_ixx}" ixy="0.0" ixz="0.0"
	       iyy="${caster_wheel_iyy}" iyz="0.0" izz="${caster_wheel_iyy}" />
    </inertial>
  </link>
  <joint name="caster_body_caster_wheel_joint" type="continuous">
    <axis xyz="0 0 1" />
    <origin xyz="${-0.7*caster_body_radius} 0 ${-caster_wheel_radius}" rpy="${-pi_div_2} 0 0"/>
    <parent link="caster_body"/>
    <child link="caster_wheel"/>
  </joint>
  
  

  <link name="camera1">
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="${camera_size} ${camera_size} ${camera_size}"/>
      </geometry>
      <material name="green"/>
    </visual>
    <inertial>
      <mass value="${camera_mass}" />
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <inertia ixx="${(1/12)*camera_mass*(camera_size**2+camera_size**2)}"
	       iyy="${(1/12)*camera_mass*(camera_size**2+camera_size**2)}"
	       izz="${(1/12)*camera_mass*(camera_size**2+camera_size**2)}"
	       ixy="0" ixz="0" iyz="0" />
    </inertial>
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="${camera_size} ${camera_size} ${camera_size}"/>
      </geometry>
    </collision>
  </link>

  <joint name="base_link_camera1_joint" type="fixed">
    <axis xyz="0 1 0" />
    <origin xyz="${base_length-camera_size/2} 0 ${base_height/2+camera_size/2}" rpy="0 0 0"/>
    <parent link="base_link"/>
    <child link="camera1" />
  </joint>

  <!-- Hokuyo Laser Range Finder (LRF) -->
  <link name="laser_link">
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <mesh filename="package://myddbot/model/hokuyo.dae"/>
      </geometry>
    </visual>

    <inertial>
      <mass value="${lrf_mass}" />
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <inertia ixx="${(1/12)*lrf_mass*(lrf_size**2+lrf_size**2)}"
	       iyy="${(1/12)*lrf_mass*(lrf_size**2+lrf_size**2)}"
	       izz="${(1/12)*lrf_mass*(lrf_size**2+lrf_size**2)}"
	       ixy="0" ixz="0" iyz="0" />
    </inertial>
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
	<box size="${lrf_size} ${lrf_size} ${lrf_size}"/>
      </geometry>
    </collision>

  </link>
  
  <joint name="base_link_laser_link_joint" type="fixed">
    <axis xyz="0 1 0" />
    <origin xyz="${base_length-camera_size/2} 0 ${base_height/2+camera_size}" rpy="0 0 0"/>
    <parent link="base_link"/>
    <child link="laser_link"/>
  </joint>

  <!-- IMU -->
  


  <!-- Gazebo plugins -->
  <!-- 
       Main source: http://gazebosim.org/tutorials?tut=ros_gzplugins&cat=connect_ros
       Source code: https://github.com/ros-simulation/gazebo_ros_pkgs/tree/kinetic-devel/gazebo_plugins/src
       Plugin types: http://gazebosim.org/tutorials?tut=plugins_hello_world&cat=write_plugin
       Tutorial: http://gazebosim.org/tutorials?tut=ros_gzplugins 
       Sensor Plugins: http://osrf-distributions.s3.amazonaws.com/gazebo/api/dev/classgazebo_1_1SensorPlugin.html 
      
  -->
  <gazebo reference="base_link">
      <material>Gazebo/Gray</material>
  </gazebo>

  <gazebo reference="caster_body">
      <material>Gazebo/Black</material>
  </gazebo>
  <gazebo reference="caster_wheel">
      <material>Gazebo/Black</material>
  </gazebo>

  <gazebo reference="wheel_left">
    <material>Gazebo/Blue</material>
  </gazebo>

  <gazebo reference="wheel_right">
    <material>Gazebo/Blue</material>
  </gazebo>

  
  <gazebo>
    <plugin name="differential_drive_controller" filename="libgazebo_ros_diff_drive.so">
      <legacyMode>false</legacyMode>
      <alwaysOn>true</alwaysOn>
      <updateRate>${update_rate_diff_drive}</updateRate>
      <leftJoint>base_link_wheel_left_joint</leftJoint>
      <rightJoint>base_link_wheel_right_joint</rightJoint>
      <wheelSeparation>${baseline}</wheelSeparation>
      <wheelDiameter>${2*wheel_radius}</wheelDiameter>
      <wheelTorque>20</wheelTorque>
      <commandTopic>cmd_vel</commandTopic>
      <odometryTopic>odom</odometryTopic>
      <odometryFrame>odom</odometryFrame>
      <robotBaseFrame>base_link</robotBaseFrame>
      <!-- Set to true to publish transforms for the wheel links, defaults to false -->
      <publishWheelTF>false</publishWheelTF>
      <!-- Set to true to publish transforms for the odometry, defaults to true -->
      <publishOdom>true</publishOdom>
      <!-- Set to true to publish sensor_msgs/JointState on /joint_states for the wheel joints, defaults to false -->
      <publishWheelJointState>false</publishWheelJointState>
    </plugin>
  </gazebo>



  <gazebo reference="camera1">
    <material>Gazebo/Green</material>
    <sensor type="camera" name="camera1_sensor">
      <update_rate>30.0</update_rate>
      <camera name="head">
        <horizontal_fov>1.3962634</horizontal_fov>
        <image>
          <width>800</width>
          <height>800</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.02</near>
          <far>300</far>
        </clip>
      </camera>
      <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
        <alwaysOn>true</alwaysOn>
        <updateRate>0.0</updateRate>
        <cameraName>camera1</cameraName>
        <imageTopicName>image_raw</imageTopicName>
        <cameraInfoTopicName>camera_info</cameraInfoTopicName>
        <frameName>camera1</frameName>
        <hackBaseline>0.07</hackBaseline>
        <distortionK1>0.0</distortionK1>
        <distortionK2>0.0</distortionK2>
        <distortionK3>0.0</distortionK3>
        <distortionT1>0.0</distortionT1>
        <distortionT2>0.0</distortionT2>
      </plugin>
    </sensor>
  </gazebo>

  <!-- hokuyo -->
  <gazebo reference="laser_link">
    <sensor type="ray" name="laser_link_sensor">
      <pose>0 0 0 0 0 0</pose>
      <visualize>false</visualize>
      <update_rate>40</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>720</samples>
            <resolution>1</resolution>
            <min_angle>-1.570796</min_angle>
            <max_angle>1.570796</max_angle>
          </horizontal>
        </scan>
        <range>
          <min>0.10</min>
          <max>30.0</max>
          <resolution>0.01</resolution>
        </range>
        <noise>
          <type>gaussian</type>
          <!-- Noise parameters based on published spec for Hokuyo laser
               achieving "+-30mm" accuracy at range < 10m.  A mean of 0.0m and
               stddev of 0.01m will put 99.7% of samples within 0.03m of the true
               reading. -->
          <mean>0.0</mean>
          <stddev>0.01</stddev>
        </noise>
      </ray>
      <plugin name="gazebo_ros_head_hokuyo_controller" filename="libgazebo_ros_laser.so">
        <topicName>/scan</topicName>
        <frameName>laser_link</frameName>
      </plugin>
    </sensor>
  </gazebo>

  <!--
 <gazebo reference="imu_link">
    <gravity>true</gravity>
    <sensor name="imu_sensor" type="imu">
      <always_on>true</always_on>
      <update_rate>100</update_rate>
      <visualize>true</visualize>
      <topic>__default_topic__</topic>
      <plugin filename="libgazebo_ros_imu_sensor.so" name="imu_plugin">
        <topicName>imu</topicName>
        <bodyName>imu_link</bodyName>
        <updateRateHZ>10.0</updateRateHZ>
        <gaussianNoise>0.0</gaussianNoise>
        <xyzOffset>0 0 0</xyzOffset>
        <rpyOffset>0 0 0</rpyOffset>
        <frameName>imu_link</frameName>
        <initialOrientationAsReference>false</initialOrientationAsReference>
      </plugin>
      <pose>0 0 0 0 0 0</pose>
    </sensor>
  </gazebo>

-->

  <!-- http://wiki.ros.org/urdf/Tutorials/Using%20a%20URDF%20in%20Gazebo -->
  <!-- 
  <gazebo>
    <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so">
      <robotNamespace>/</robotNamespace>
    </plugin>
  </gazebo>
  -->
  
</robot>
